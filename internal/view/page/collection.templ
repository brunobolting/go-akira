package page

import "akira/internal/view/layout"

templ CreateCollection() {
	@layout.Page("Create Collection") {
		<div class="container mx-auto px-4 py-6">
			<div class="flex items-center justify-between mb-6">
				<h1 class="text-2xl font-bold">Create New Collection</h1>
				<a href="/" class="btn btn-outline btn-sm">
					<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
					</svg>
					Back to Dashboard
				</a>
			</div>
			<div class="bg-base-100 rounded-lg shadow-sm p-6">
				<form hx-post="/collection/create" hx-swap="outerHTML" class="space-y-8">
					<div>
						<div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
							<div class="form-control w-full">
								<fieldset class="fieldset">
									<legend class="fieldset-legend">Title</legend>
									<input
										type="text"
										class="input"
										placeholder="Type here"
										autofocus
										hx-post="/collection/generate-slug"
										hx-target="#slug-preview"
										hx-trigger="keyup changed delay:500ms"
									/>
								</fieldset>
							</div>
							<div class="form-control w-full">
								<fieldset class="fieldset">
									<legend class="fieldset-legend">Slug</legend>
									<input type="text" class="input" placeholder="Type here" id="slug-field" />
								</fieldset>
							</div>
							<div>
								<fieldset class="fieldset">
									<legend class="fieldset-legend">Nº Volumes <spam class="fieldset-label">(optional)</spam></legend>
									<input type="number" class="input" placeholder="Type here" />
								</fieldset>
							</div>
						</div>
						<div class="form-control w-full mt-4">
							<label class="label">
								<span class="label-text font-medium">Crawler Options</span>
							</label>
							<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-3">
								<label class="label cursor-pointer justify-start gap-3 border border-base-300 rounded-lg p-3 hover:bg-base-200/30 transition-colors">
									<input type="checkbox" name="track_prices" class="checkbox checkbox-primary checkbox-sm"/>
									<div>
										<span class="label-text text-sm font-medium block">Auto Sync</span>
										<span class="text-xs text-base-content/70 text-wrap">Sync data with internet automaticaly</span>
									</div>
								</label>
								<label class="label cursor-pointer justify-start gap-3 border border-base-300 rounded-lg p-3 hover:bg-base-200/30 transition-colors">
									<input type="checkbox" name="track_prices" class="checkbox checkbox-primary checkbox-sm"/>
									<div>
										<span class="label-text text-sm font-medium block">Track price changes</span>
										<span class="text-xs text-base-content/70 text-wrap">Get notified when prices drop for missing volumes</span>
									</div>
								</label>
								<label class="label cursor-pointer justify-start gap-3 border border-base-300 rounded-lg p-3 hover:bg-base-200/30 transition-colors">
									<input type="checkbox" name="track_prices" class="checkbox checkbox-primary checkbox-sm"/>
									<div>
										<span class="label-text text-sm font-medium block">Track new releases</span>
										<span class="text-xs text-base-content/70 text-wrap">Get notified when new volumes are released</span>
									</div>
								</label>
								<label class="label cursor-pointer justify-start gap-3 border border-base-300 rounded-lg p-3 hover:bg-base-200/30 transition-colors">
									<input type="checkbox" name="track_prices" class="checkbox checkbox-primary checkbox-sm"/>
									<div>
										<span class="label-text text-sm font-medium block">Track reviews</span>
										<span class="text-xs text-base-content/70 text-wrap">Import reviews from customers on searched sites</span>
									</div>
								</label>
							</div>
						</div>
						<div class="form-control w-full mt-4">
							<label class="label">
								<span class="label-text font-medium">Search Terms</span>
								<span class="label-text-alt">Add multiple, separated by Enter</span>
							</label>
							<div class="flex items-start gap-2">
								<div class="flex-1">
									<input
										type="text"
										id="search-term-input"
										placeholder="E.g. 'Chainsaw Man', 'チェンソーマン', 'Tatsuki Fujimoto'"
										class="input input-bordered w-full"
										onkeydown="addSearchTermOnEnter(event)"
									/>
									<label class="label">
										<span class="label-text-alt">Different versions of the title, author names, etc.</span>
									</label>
								</div>
								<button
									type="button"
									class="btn btn-outline"
									onclick="addSearchTerm()"
								>
									Add
								</button>
							</div>
							<div id="search-terms-container" class="flex flex-wrap gap-2 mt-2">
								<!-- Search terms will be inserted here dynamically -->
							</div>
							<input type="hidden" name="search_terms" id="search_terms_input" value=""/>
						</div>
					</div>
					<div class="border-t border-base-300 pt-6 mt-6">
						<div class="flex justify-end gap-3">
							<button type="button" class="btn btn-outline" onclick="window.history.back();">
								Cancel
							</button>
							<button type="submit" class="btn btn-primary">
								Create Collection
							</button>
						</div>
					</div>
				</form>
			</div>
		</div>
		<script>
            let searchTerms = [];

            function addSearchTerm() {
                const input = document.getElementById('search-term-input');
                const term = input.value.trim();

                if (term && !searchTerms.includes(term)) {
                    searchTerms.push(term);
                    updateSearchTermsDisplay();
                    updateSearchTermsInput();
                    input.value = '';
                }
            }

            function addSearchTermOnEnter(event) {
                if (event.key === 'Enter') {
                    event.preventDefault();
                    addSearchTerm();
                }
            }

            function removeSearchTerm(term) {
                searchTerms = searchTerms.filter(t => t !== term);
                updateSearchTermsDisplay();
                updateSearchTermsInput();
            }

            function updateSearchTermsDisplay() {
                const container = document.getElementById('search-terms-container');
                container.innerHTML = '';

                searchTerms.forEach(term => {
                    const badge = document.createElement('div');
                    badge.className = 'badge badge-lg gap-2 py-4';
                    badge.innerHTML = `
                        ${term}
                        <button type="button" onclick="removeSearchTerm('${term}')" class="btn btn-xs btn-ghost btn-circle">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                            </svg>
                        </button>
                    `;
                    container.appendChild(badge);
                });
            }

            function updateSearchTermsInput() {
                document.getElementById('search_terms_input').value = JSON.stringify(searchTerms);
            }
        </script>
	}
}
